{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vNetName": {
            "type": "string",
            "metadata": {
                "description": "Required. The Virtual Network (vNet) Name."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Optional. Location for all resources."
            }
        },
        "dnsServers": {
            "type": "array",
            "defaultValue": [
            ],
            "metadata": {
                "description": "Optional. DNS Servers associated to the Virtual Network."
            }
        },
        "ddosProtectionPlanId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource Id of the DDoS protection plan to assign the VNET to. If it's left blank, DDoS protection will not be configured. If it's provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription."
            }
        },
        "diagnosticLogsRetentionInDays": {
            "type": "int",
            "defaultValue": 365,
            "minValue": 0,
            "maxValue": 365,
            "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
            }
        },
        "diagnosticStorageAccountId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource identifier of the Diagnostic Storage Account."
            }
        },
        "workspaceId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource identifier of Log Analytics."
            }
        },
        "eventHubAuthorizationRuleId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
            }
        },
        "eventHubName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
            }
        },
        "tags": {
            "type": "object",
            "defaultValue": {
                "Env": "nonprod",
                "DevOwner": "Shmuel.Laufer@ab-inbev.com",
                "ProjectName": "brewdatportal",
                "Type": "frontend"
            },
            "metadata": {
                "description": "Optional. Tags of the resource."
            }
        }
    },
    "variables": {
        "vNetAddressPrefixes": [ "10.4.0.0/16" ],
        "subnets": [
            {
                "name": "AppSubnet",
                "addressPrefix": "10.4.1.0/24",
                "networkSecurityGroupName": "",
                "routeTableName": "",
                "delegations": "",
                "serviceEndpoints": [
                    {
                        "service": "Microsoft.EventHub"
                    },
                    {
                        "service": "Microsoft.Storage"
                    },
                    {
                        "service": "Microsoft.KeyVault"
                    },
                    {
                        "service": "Microsoft.AzureCosmosDB"
                    },
                    {
                        "service": "Microsoft.ContainerRegistry"
                    }

                ]
            },
            {
                "name": "AKSSubnet",
                "addressPrefix": "10.4.2.0/24",
                "networkSecurityGroupName": "",
                "routeTableName": "",
                "delegations": "",
                "serviceEndpoints": []
            }
        ],
        "subnetNamesToOutput": {
            "copy": [
                {
                    "name": "subnetNamesOutput",
                    "count": "[length(variables('subnets'))]",
                    "input": "[variables('subnets')[copyIndex('subnetNamesOutput')].name]"
                }
            ]
        },
        "subnetIdsToOutput": {
            "copy": [
                {
                    "name": "subnetIdsOutput",
                    "count": "[length(variables('subnets'))]",
                    "input": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetName'), variables('subnets')[copyIndex('subnetIdsOutput')].name)]"
                }
            ]
        },
        "dnsServers": {
            "dnsServers": "[array(parameters('dnsServers'))]"
        },
        "ddosProtectionPlan": {
            "id": "[parameters('ddosProtectionPlanId')]"
        },
        "diagnosticsMetrics": [
            {
                "category": "AllMetrics",
                "timeGrain": null,
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            }
        ],
        "diagnosticsLogs": [
            {
                "category": "VMProtectionAlerts",
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            }
        ]
    },
    "resources": [
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2020-05-01",
            "name": "[parameters('vNetName')]",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": "[variables('vNetAddressPrefixes')]"
                },
                "ddosProtectionPlan": "[if(not(empty(parameters('ddosProtectionPlanId'))), variables('ddosProtectionPlan'), json('null'))]",
                "dhcpOptions": "[if(empty(parameters('dnsServers')), json('null'), variables('dnsServers'))]",
                "enableDdosProtection": "[not(empty(parameters('ddosProtectionPlanId')))]",
                "copy": [
                    {
                        "name": "subnets",
                        "count": "[length(variables('subnets'))]",
                        "input": {
                            "name": "[variables('subnets')[copyIndex('subnets')].name]",
                            "properties": {
                                "addressPrefix": "[variables('subnets')[copyIndex('subnets')].addressPrefix]",
                                "networkSecurityGroup": "[if(empty(variables('subnets')[copyIndex('subnets')].networkSecurityGroupName), json('null'), json(concat('{\"id\": \"', resourceId('Microsoft.Network/networkSecurityGroups', variables('subnets')[copyIndex('subnets')].networkSecurityGroupName), '\"}')))]",
                                "routeTable": "[if(empty(variables('subnets')[copyIndex('subnets')].routeTableName), json('null'), json(concat('{\"id\": \"', resourceId('Microsoft.Network/routeTables', variables('subnets')[copyIndex('subnets')].routeTableName), '\"}')))]",
                                "serviceEndpoints": "[if(empty(variables('subnets')[copyIndex('subnets')].serviceEndpoints), json('null'), variables('subnets')[copyIndex('subnets')].serviceEndpoints)]",
                                "delegations": "[if(empty(variables('subnets')[copyIndex('subnets')].delegations), json('null'),variables('subnets')[copyIndex('subnets')].delegations)]"
                            }
                        }
                    }
                ]
            },
            "resources": [
                {
                    "type": "Microsoft.Network/virtualNetworks/providers/diagnosticsettings",
                    "apiVersion": "2017-05-01-preview",
                    "name": "[concat(parameters('vNetName'), '/Microsoft.Insights/service')]",
                    "location": "[parameters('location')]",
                    "condition": "[or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName'))))]",
                    "dependsOn": [
                        "[concat('Microsoft.Network/virtualNetworks/', parameters('vNetName'))]"
                    ],
                    "properties": {
                        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
                        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
                        "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
                        "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
                        "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsMetrics'))]",
                        "logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsLogs'))]"
                    }
                }
            ]
        }
    ],
    "outputs": {
        "vNetResourceGroup": {
            "type": "string",
            "value": "[resourceGroup().name]",
            "metadata": {
                "description": "The name of the Resource Group the Virtual Network was created in."
            }
        },
        "vNetResourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vNetName'))]",
            "metadata": {
                "description": "The Resource id of the Virtual Network deployed."
            }
        },
        "vNetName": {
            "type": "string",
            "value": "[parameters('vNetName')]",
            "metadata": {
                "description": "The name of the Virtual Network deployed."
            }
        },
        "subnetNames": {
            "type": "array",
            "value": "[variables('subnetNamesToOutput').subnetNamesOutput]",
            "metadata": {
                "description": "The Names of the Subnets deployed to the Virtual Network."
            }
        },
        "subnetIds": {
            "type": "array",
            "value": "[variables('subnetIdsToOutput').subnetIdsOutput]",
            "metadata": {
                "description": "The Resource Ids of the Subnets deployed to the Virtual Network."
            }
        }
    }
}